{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ColorPicker","value","colors","onChange","useState","showHideBlock","setShowHideBlock","className","style","backgroundColor","onClick","colorsArr","handleChangeColor","DefaultColors","colorItems","map","item","color","name","rgbToHex","r","g","b","toString","slice","Sliders","rgb","result","exec","red","parseInt","green","blue","hexToRGB","id","type","min","max","steps","e","target","Number","App","setColor","newValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ba11e12.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst App = () => {\n\tconst [value, setColor] = useState('#db3e00');\n\tconst colors = [\n\t\t{ name: 'red', color: '#db3e00' },\n\t\t{ name: 'yellow', color: '#fccb00' },\n\t\t{ name: 'green', color: '#008b02' },\n\t\t{ name: 'blue', color: '#1273de' },\n\t] \n\tconst handleChangeColor = newValue => {\n\t\tsetColor(newValue);\n\t};\n\treturn (\n\t\t<div className=\"wrapper\">\n\t\t\t<ColorPicker value={value} colors={colors} onChange={handleChangeColor}  />\n\t\t</div>\n\t);\n}\n\nconst ColorPicker = ({value, colors, onChange}) => {\n\tconst [showHideBlock, setShowHideBlock] = useState('hide');\n\treturn(\n\t\t<div className=\"color-picker\">\n\t\t\t<span className=\"current-color-name\">{value}</span>\n\t\t\t<div className=\"controls\">\n\t\t\t\t<div>\n\t\t\t\t\t<span className=\"default-color\" style={{backgroundColor: `${value}`}} onClick={() => setShowHideBlock(showHideBlock == 'show-sliders' ? 'hide' : 'show-sliders')} ></span>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<span className=\"arrow\" onClick={() => setShowHideBlock(showHideBlock == 'show-colors' ? 'hide' : 'show-colors')} ></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{showHideBlock == 'show-colors' ? <DefaultColors value={value} colorsArr={colors} handleChangeColor={onChange} /> : null}\n\t\t\t{showHideBlock == 'show-sliders' ? <Sliders value={value} handleChangeColor={onChange} /> : null}\n\t\t</div>\n\t)\n}\n\nconst DefaultColors = ({value, colorsArr, handleChangeColor}) => {\n\tconst colors = colorsArr;\n\tconst colorItems = colors.map((item) => \n\t\t<div className={item.color == value ? 'active' : ''} key={item.color} onClick={() => handleChangeColor(item.color)} >\n\t\t\t<span className=\"name\">{item.name}</span>\n\t\t\t<span className=\"color\" style={{backgroundColor: `${item.color}`}}></span>\n\t\t</div>\n\t);\n\treturn (\n\t\t<div className=\"container-default-colors\">\n\t\t\t{colorItems}\n\t\t</div>\n  )\n}\n\nconst hexToRGB = (value) => {\n\tvar result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(value);\n\treturn result ? {\n\t\tred: parseInt(result[1], 16),\n\t\tgreen: parseInt(result[2], 16),\n\t\tblue: parseInt(result[3], 16)\n\t} : null;\n}\n\nconst rgbToHex = (r, g, b) => {\n\treturn \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n}\n\nconst Sliders = ({value, handleChangeColor}) => {\n\tlet rgb = hexToRGB(value);\n\treturn (\n\t\t\t<div className=\"sliders\">\n\t\t\t\t<div className=\"red\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\tR\n\t\t\t\t\t</label>\n\t\t\t\t\t<input id=\"red\" type=\"range\" \n\t\t\t\t\t\tmin=\"0\" \n\t\t\t\t\t\tmax=\"255\" \n\t\t\t\t\t\tsteps=\"1\" \n\t\t\t\t\t\tvalue={rgb.red} \n\t\t\t\t\t\tonChange={e => handleChangeColor(rgbToHex(e.target.value, rgb.green, rgb.blue))}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"green\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\tG\n\t\t\t\t\t</label>\n\t\t\t\t\t<input id=\"green\" type=\"range\" \n\t\t\t\t\t\tmin=\"0\" \n\t\t\t\t\t\tmax=\"255\" \n\t\t\t\t\t\tsteps=\"1\" \n\t\t\t\t\t\tvalue={rgb.green} \n\t\t\t\t\t\tonChange={e => handleChangeColor(rgbToHex(rgb.red, e.target.value, rgb.blue))} \n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div className=\"blue\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\tB\n\t\t\t\t\t</label>\n\t\t\t\t\t<input id=\"blue\" type=\"range\"  \n\t\t\t\t\t\tmin=\"0\" \n\t\t\t\t\t\tmax=\"255\" \n\t\t\t\t\t\tsteps=\"1\" \n\t\t\t\t\t\tvalue={rgb.blue} \n\t\t\t\t\t\tonChange={e => handleChangeColor(rgbToHex(rgb.red, rgb.green, Number(e.target.value)))} \n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t</div>\n\t)\n}\n\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}