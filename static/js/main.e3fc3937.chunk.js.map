{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ColorPicker","value","colors","onChange","useState","showHideBlock","setShowHideBlock","container","useRef","useEffect","document","addEventListener","handleClickOutside","removeEventListener","e","current","contains","target","className","ref","handleChangeColor","onClick","colorsArr","DefaultColors","colorItems","map","item","color","name","style","backgroundColor","rgbToHex","r","g","b","toString","slice","Sliders","newColorValue","setNewValue","handleNewValue","newColor","rgb","result","exec","red","parseInt","green","blue","hexToRGB","id","type","min","max","steps","Number","App","setColor","newValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e3fc3937.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nconst App = () => {\n\tconst [value, setColor] = useState('#ffffff');\n\tconst colors = [\n\t\t{ name: 'red', color: '#db3e00' },\n\t\t{ name: 'yellow', color: '#fccb00' },\n\t\t{ name: 'green', color: '#008b02' },\n\t\t{ name: 'blue', color: '#1273de' },\n\t] \n\tconst handleChangeColor = newValue => {\n\t\tsetColor(newValue);\n\t};\n\tuseEffect(() => {\n\t\thandleChangeColor(value);\n\t})\n\treturn (\n\t\t<div className=\"wrapper\">\n\t\t\t<ColorPicker value={value} colors={colors} onChange={handleChangeColor}  />\n\t\t</div>\n\t);\n}\nconst ColorPicker = ({value, colors, onChange}) => {\n\tconst [showHideBlock, setShowHideBlock] = useState('hide');\n\tconst container = useRef();\n\tuseEffect(() => {\n\t\tif (showHideBlock === \"show-colors\" || showHideBlock === \"show-sliders\" ) {\n\t\t\tdocument.addEventListener('mousedown', handleClickOutside);\n\t\t} else {\n\t\t\tdocument.removeEventListener('mousedown', handleClickOutside);\n\t\t}\n\t\treturn () => {\n\t\t\tdocument.removeEventListener('mousedown', handleClickOutside);\n\t\t};\n\t\t\n\t}, [showHideBlock]);\n\tconst handleClickOutside = (e) => {\n\t\tif (container.current && container.current.contains(e.target)) {\n\t\t\treturn;\n\t\t}\n\t\tsetShowHideBlock('hide');\n\t};\n\treturn(\n\t\t<div className=\"color-picker\" ref={container}>\n\t\t\t<span className=\"current-color-name\">{value}</span>\n\t\t\t<div className=\"controls\">\n\t\t\t\t<div className=\"open-menu\">\n\t\t\t\t\t<Sliders value={value} handleChangeColor={onChange} setShowHideBlock={setShowHideBlock} showHideBlock={showHideBlock} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"open-menu\">\n\t\t\t\t\t<span className=\"arrow\" onClick={() => setShowHideBlock(showHideBlock === 'show-colors' ? 'hide' : 'show-colors')} ></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{showHideBlock === 'show-colors' ? \n\t\t\t\t<DefaultColors value={value} colorsArr={colors} handleChangeColor={onChange} setShowHideBlock={setShowHideBlock} showHideBlock={showHideBlock} /> : null}\n\t\t</div>\n\t)\n}\n\n\n\nconst DefaultColors = ({value, colorsArr, handleChangeColor, setShowHideBlock, showHideBlock}) => {\n\tconst colors = colorsArr;\n\tconst colorItems = colors.map((item) => \n\t\t<div className={item.color === value ? 'active' : ''} key={item.color} onClick={() => {handleChangeColor(item.color);setShowHideBlock(showHideBlock === 'show-colors' ? 'hide' : 'show-colors')}} >\n\t\t\t<span className=\"name\">{item.name}</span>\n\t\t\t<span className=\"color\" style={{backgroundColor: `${item.color}`}}></span>\n\t\t</div>\n\t);\n\treturn (\n\t\t<div className=\"container-default-colors\">\n\t\t\t{colorItems}\n\t\t</div>\n  )\n}\n\nconst hexToRGB = (value) => {\n\tvar result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(value);\n\treturn result ? {\n\t\tred: parseInt(result[1], 16),\n\t\tgreen: parseInt(result[2], 16),\n\t\tblue: parseInt(result[3], 16)\n\t} : null;\n}\n\nconst rgbToHex = (r, g, b) => {\n\treturn \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n}\n\nconst Sliders = ({value, handleChangeColor, setShowHideBlock, showHideBlock}) => {\n\tconst [newColorValue, setNewValue] = useState(value);\n\tconst handleNewValue = newColor => {\n\t\tsetNewValue(newColor);\n\t};\n\tuseEffect(() => {\n\t\thandleNewValue(value)\n\t}, [value, showHideBlock]);\n\tlet rgb = hexToRGB(newColorValue);\n\treturn (\n\t\t<>\n\t\t\t<span className=\"default-color\" style={{backgroundColor: `${newColorValue}`}} onClick={() => setShowHideBlock(showHideBlock === 'show-sliders' ? 'hide' : 'show-sliders')} ></span>\n\t\t\t{showHideBlock === 'show-sliders' ? \n\t\t\t\t<div className=\"sliders\">\n\t\t\t\t\t<div className=\"red\">\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\tR\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input id=\"red\" type=\"range\" \n\t\t\t\t\t\t\tmin=\"0\" \n\t\t\t\t\t\t\tmax=\"255\" \n\t\t\t\t\t\t\tsteps=\"1\" \n\t\t\t\t\t\t\tvalue={rgb.red} \n\t\t\t\t\t\t\tonChange={e => handleNewValue(rgbToHex(e.target.value, rgb.green, rgb.blue))}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"green\">\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\tG\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input id=\"green\" type=\"range\" \n\t\t\t\t\t\t\tmin=\"0\" \n\t\t\t\t\t\t\tmax=\"255\" \n\t\t\t\t\t\t\tsteps=\"1\" \n\t\t\t\t\t\t\tvalue={rgb.green} \n\t\t\t\t\t\t\tonChange={e => handleNewValue(rgbToHex(rgb.red, e.target.value, rgb.blue))} \n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"blue\">\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\tB\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input id=\"blue\" type=\"range\"  \n\t\t\t\t\t\t\tmin=\"0\" \n\t\t\t\t\t\t\tmax=\"255\" \n\t\t\t\t\t\t\tsteps=\"1\" \n\t\t\t\t\t\t\tvalue={rgb.blue} \n\t\t\t\t\t\t\tonChange={e => handleNewValue(rgbToHex(rgb.red, rgb.green, Number(e.target.value)))} \n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button onClick={() => {handleChangeColor(newColorValue); setShowHideBlock(showHideBlock === 'show-sliders' ? 'hide' : 'show-sliders'); }}>OK</button>\n\t\t\t\t\t<button onClick={() => {handleNewValue(value); setShowHideBlock(showHideBlock === 'show-sliders' ? 'hide' : 'show-sliders')}}>Cancel</button>\n\t\t\t\t</div> : null }\n\t\t\t</>\n\t)\n}\n\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}